stages:
  - build
  - dockerize
  - deploy

variables:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: rig14/matkarajad-front

build-vite-app:
  stage: build
  image: node:latest
  script:
    - npm ci # does a clean installation of packages
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 30 days

dockerize-vite-app:
  stage: dockerize
  image: docker:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
script:
  - |
    echo "DOCKER_REGISTRY: $DOCKER_REGISTRY"
    echo "DOCKER_IMAGE: $DOCKER_IMAGE"
    echo "CI_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA"
    docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY
    docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA .
    docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
    docker tag $DOCKER_REGISTRY/$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA $DOCKER_REGISTRY/$DOCKER_IMAGE:latest
    docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:latest

deploy-vite-app: # will only run on push to main
  stage: deploy
  image: alpine:latest
  needs:
    - job: build-vite-app
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script: # install required packages to enable SSH into server
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
  - scp -o StrictHostKeyChecking=no ./compose.yaml ubuntu@$SERVER_IP:/home/ubuntu/frontend/
    - ssh -o StrictHostKeyChecking=no ubuntu@$SERVER_IP "
    cd /home/ubuntu/frontend &&
    docker compose pull &&
    docker compose up -d --remove-orphans"
